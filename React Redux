✅️React Redux:

✅️REQUIREMENTS
1. React Redux installed
2. Redux installed


✅️1. 3 Important files
	1. Actions.js
	2. Reducers.js
	3. Store
	
	
✅️1. Actions.js

--> contains all the action function which basically return the object of type 

--> Example of Counter program using React Redux
	export const INCREMENT = 'INCREMENT';
	export const DECREMENT = 'DECREMENT';

	export const increment = () => ({
	  type: INCREMENT
	});

	export const decrement = () => ({
	  type: DECREMENT
	});
	
✅️2. Reducers.js

--> Contains reducer function

--> Example:
	import { INCREMENT, DECREMENT } from './actions';

	const initialState = {
	  count: 0
	};

	const rootReducer = (state = initialState, action) => {
	  switch (action.type) {
	    case INCREMENT:
	      return { ...state, count: state.count + 1 }; // ...state to store previous state also
	    case DECREMENT:
	      return { ...state, count: state.count - 1 };
	    default:
	      return state;
	  }
	};

	export default rootReducer;
	
	
✅️3. Store.js

--> Store all values globally
--> Example: 

	import { createStore, compose } from 'redux';
	import rootReducer from './reducers';

	const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;
	const store = createStore(
	  rootReducer,
	  composeEnhancers()
	);

	export default store;
	
✅️4. Wrap APP.js with Provider and pass store as prop
--> Example

	import React from 'react';
	import ReactDOM from 'react-dom/client';
	import { Provider } from 'react-redux';
	import store from './store';
	import App from './App';

	const root = ReactDOM.createRoot(document.getElementById('root'));

	root.render(
	  <Provider store={store}>
	    <App />
	  </Provider>
	);
	

✅️5. Use useSelector hook to get the state and useDispatch to dispatch the actions

--> Example:

	import React from 'react';
	import { useSelector, useDispatch } from 'react-redux';
	import { increment, decrement } from './actions';

	const Counter = () => {
	  const count = useSelector((state) => state.count);
	  const dispatch = useDispatch();

	  return (
	    <div>
	      <h1>{count}</h1>
	      <button onClick={() => dispatch(increment())}>Increment</button>
	      <button onClick={() => dispatch(decrement())}>Decrement</button>
	    </div>
	  );
	};

	export default Counter;



✅️ Spread Operator with object and array

data = [1, 2, 3]

d1 = {
    a : 2,
    b : 2
}


b = {
    ...data
}

d = {
    ...d1,
    d : [...data]
}

console.log(d, b) // Output: { a: 2, b: 2, d: [ 1, 2, 3 ] } { '0': 1, '1': 2, '2': 3 }

✅️Object in javascript --> Follow Deep Copy they are not shallow copy

Deep copy means --> If any change occured in assigned variable also change main variable
shallow copy --> Any change in assigned variable not change main variable
--> Example

	data = {
	    a : 1
	}


	// Deep copy
	data1 = data

	data1.a = 2

	console.log(data)

	//shallow copy - Use spread operator
	data2 = {...data}

	data2.a = 5

	console.log(data)

	✅️ Output:
	{ a: 2 }
	{ a: 2 }
	
✅️Destructuring

const data = [1, 2, 3];

const [a, ...b] = data;

console.log(a); //1
console.log(b); //[ 2, 3 ]









